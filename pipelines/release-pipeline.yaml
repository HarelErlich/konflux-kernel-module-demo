# tasks/release-pipeline.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: kernel-module-release-pipeline
spec:
  description: >-
    This pipeline builds a kernel module, repacks the artifact, and then
    optionally stores it in a Git repository and/or an S3 bucket.
  params:
    # --- Parameters to control the flow ---
    - name: storeInGit
      type: string
      description: "Set to 'true' to store the artifact in a Git repository."
      default: "false"
    - name: storeInS3
      type: string
      description: "Set to 'true' to store the artifact in S3 storage."
      default: "true" # Let's make S3 the default for this example

    # --- Git-specific Parameters ---
    - name: gitRepoURL
      type: string
      description: "The Git repository URL for storing artifacts."
      default: "github.com/HarelErlich/kernel-module-demo-artifacts.git"
    - name: gitRepoTokenSecret
      type: string
      description: "The name of the secret holding the Git repository token."
      default: "git-artifact-repo-token" # We will create this secret later

    # --- S3-specific Parameters ---
    - name: s3Endpoint
      type: string
      description: "The S3 endpoint URL."
      default: "https://s3.us-east-1.amazonaws.com" # Default to AWS US East 1
    - name: s3Bucket
      type: string
      description: "The S3 bucket name."
      default: "herlich-kmods-storage-20250907"
    - name: s3CredentialsSecret
      type: string
      description: "The name of the secret holding S3 credentials."
      default: "s3-artifact-credentials" # We will create this secret later
  
  workspaces:
    - name: source
      description: A workspace for all pipeline operations.

  tasks:
    # --- Task 1: The standard Konflux build task ---
    # This task is provided by Konflux. It builds the container image.
    - name: build-container
      taskRef:
        name: buildah
        kind: Task
      params:
        - name: IMAGE
          value: "$(context.pipelineRun.namespace)/$(context.pipelineRun.name):build-$(context.pipelineRun.uid)"
      workspaces:
        - name: source
          workspace: source

    # --- Task 2: Our custom task to extract the .ko file ---
    - name: repack-module
      runAfter: ["build-container"] # Run this only after the build is complete
      taskRef:
        name: repack-kernel-module # The task we created
      params:
        - name: input-image
          # Pass the output image from the build task as input to this task
          value: "$(tasks.build-container.results.IMAGE_URL)"
      workspaces:
        - name: source
          workspace: source

    # --- Task 3 (Conditional): Our custom task to push to Git ---
    - name: store-in-git
      runAfter: ["repack-module"] # Run after the repack is done
      when:
        - input: "$(params.storeInGit)"
          operator: in
          values: ["true"]
      taskRef:
        name: push-to-git # The task we created
      params:
        - name: kmod-artifact
          # Pass the output artifact from the repack task as input
          value: "$(tasks.repack-module.results.kmod-artifact)"
        - name: gitRepoURL
          value: "$(params.gitRepoURL)"
        - name: gitRepoTokenSecret
          value: "$(params.gitRepoTokenSecret)"
      workspaces:
        - name: source
          workspace: source

    # --- Task 4 (Conditional): Our custom task to push to S3 ---
    - name: store-in-s3
      runAfter: ["repack-module"] # Run after the repack is done
      when:
        - input: "$(params.storeInS3)"
          operator: in
          values: ["true"]
      taskRef:
        name: push-to-s3 # The task we created
      params:
        - name: kmod-artifact
          # Pass the output artifact from the repack task as input
          value: "$(tasks.repack-module.results.kmod-artifact)"
        - name: s3Endpoint
          value: "$(params.s3Endpoint)"
        - name: s3Bucket
          value: "$(params.s3Bucket)"
        - name: s3CredentialsSecret
          value: "$(params.s3CredentialsSecret)"
      workspaces:
        - name: source
          workspace: source